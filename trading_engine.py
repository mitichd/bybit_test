"""
–¢—Ä–µ–π–¥–∏–Ω–≥–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –∑ DCA —Ç–∞ TP —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
"""

import os
import json
import time
import signal
import sys
from dotenv import load_dotenv
from pybit.unified_trading import HTTP
from constants import TradingConstants
from utils import (
    setup_logging, format_price, format_quantity,
    calculate_quantity, calculate_tp_price, calculate_dca_prices,
    validate_config, get_api_symbol, get_api_side, get_tp_side
)

class TradingEngine:
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit API, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—è–º–∏,
    —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥—ñ–≤–ª—ñ.
    """

    def __init__(self):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞

        –°—Ç–≤–æ—Ä—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Bybit API, –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è
        —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª—é—î –¥–≤–∏–∂–æ–∫ –¥–æ —Ä–æ–±–æ—Ç–∏.
        """
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        self._setup_logging()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        load_dotenv()

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit
        self._connect_to_exchange()

        # –°—Ç–∞–Ω –¥–≤–∏–∂–∫–∞
        self.is_running = False
        self.config = None
        self.start_time = None

        # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _setup_logging(self):
        """
        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è

        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤ —Ç–∞ —Ä—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó.
        """
        self.logger = setup_logging()

    def _connect_to_exchange(self):
        """
        –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit API

        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Bybit Demo/Testnet API
        –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–ª—é—á—ñ –∑ .env —Ñ–∞–π–ª—É.

        Raises:
            Exception: –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        """
        try:
            self.session = HTTP(
                testnet=False,
                demo=True,
                api_key=os.getenv('BYBIT_API_KEY'),
                api_secret=os.getenv('BYBIT_API_SECRET')
            )
            self.logger.info("ÔøΩÔøΩ –¢—Ä–µ–π–¥–∏–Ω–≥–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
            self.logger.info("üìä –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit Demo —É—Å–ø—ñ—à–Ω–µ!")
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            raise

    def _signal_handler(self, signum, frame):
        """
        –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown

        Args:
            signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª—É
            frame: –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–¥—Ä —Å—Ç–µ–∫—É
        """
        self.logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó...")
        self.stop()
        sys.exit(0)

    def load_config(self):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ JSON —Ñ–∞–π–ª—É

        –ß–∏—Ç–∞—î config.json, –≤–∞–ª—ñ–¥—É—î –π–æ–≥–æ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤ self.config

        Returns:
            dict or None: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        """
        try:
            with open('config.json', 'r') as f:
                self.config = json.load(f)

            # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            validate_config(self.config)

            self.logger.info(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {self.config['symbol']}")
            return self.config
        except FileNotFoundError:
            self.logger.error("‚ùå –§–∞–π–ª config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None
        except json.JSONDecodeError as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            return None
        except ValueError as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return None

    def start(self):
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥—ñ–≤–ª—ñ

        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –≤—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é,
        —Ä–æ–∑–º—ñ—â—É—î TP —Ç–∞ DCA –æ—Ä–¥–µ—Ä–∏, –ø–æ—á–∏–Ω–∞—î –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.

        Returns:
            None
        """
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è –î–≤–∏–∂–æ–∫ –≤–∂–µ –ø—Ä–∞—Ü—é—î")
            return

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        if not self.load_config():
            return

        self.is_running = True
        self.start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        self._run_trading_loop()

    def stop(self):
        """
        –ó—É–ø–∏–Ω–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑ –∑–∞–∫—Ä–∏—Ç—Ç—è–º –ø–æ–∑–∏—Ü—ñ–π

        –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —Å–∫–∞—Å–æ–≤—É—î –æ—Ä–¥–µ—Ä–∏
        –ø–µ—Ä–µ–¥ –∑—É–ø–∏–Ω–∫–æ—é –¥–≤–∏–∂–∫–∞.
        """
        if not self.is_running:
            self.logger.warning("‚ö†Ô∏è –î–≤–∏–∂–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é—î")
            return

        self.logger.info("üõë –ó—É–ø–∏–Ω—è—î–º–æ —Ç–æ—Ä–≥—ñ–≤–ª—é...")

        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó
        self.close_all_positions()

        self.is_running = False
        self.logger.info("‚èπÔ∏è –¢–æ—Ä–≥—ñ–≤–ª—è –∑—É–ø–∏–Ω–µ–Ω–∞")

    def _run_trading_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç–æ—Ä–≥—ñ–≤–ª—ñ

        –í–∏–∫–æ–Ω—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ ‚Üí –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó ‚Üí
        —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è TP/DCA –æ—Ä–¥–µ—Ä—ñ–≤ ‚Üí –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.
        """
        self.logger.info("\nÔøΩÔøΩ –ó–ê–ü–£–°–ö –¢–†–ï–ô–î–ò–ù–ì–û–í–û–ì–û –î–í–ò–ñ–ö–ê")
        self.logger.info("=" * 50)

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        current_price = self.get_current_price(self.config['symbol'])
        if not current_price:
            return

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        order = self.open_position(self.config)
        if not order:
            return

        # –°—Ç–∞–≤–∏–º–æ TP –æ—Ä–¥–µ—Ä–∏
        self.place_tp_orders(self.config, current_price)

        # –°—Ç–∞–≤–∏–º–æ DCA –æ—Ä–¥–µ—Ä–∏
        self.place_dca_orders(self.config, current_price)

        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        self.logger.info("\nÔøΩÔøΩ –ü–æ—á–∏–Ω–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥...")
        api_symbol = self.config['symbol'].replace('/', '')

        while self.is_running:
            self.monitor_positions(api_symbol)
            time.sleep(TradingConstants.MONITORING_INTERVAL)

    def get_current_price(self, symbol):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –∞–∫—Ç–∏–≤—É

        Args:
            symbol (str): –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–æ—ó –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'BTC/USDT')

        Returns:
            float or None: –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        """
        try:
            api_symbol = get_api_symbol(symbol)
            response = self.session.get_tickers(category="linear", symbol=api_symbol)

            if response['retCode'] == 0 and response['result']['list']:
                price = float(response['result']['list'][0]['lastPrice'])
                self.logger.info(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {symbol}: {format_price(price)}")
                return price
            else:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {response}")
                return None
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {e}")
            return None

    def open_position(self, config):
        """
        –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó

        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î leverage, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
        —Ç–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—î market order.

        Args:
            config (dict): –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ

        Returns:
            dict or None: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞ –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        """
        symbol = config['symbol']
        side = config['side']
        amount = config['market_order_amount']
        leverage = config['leverage']

        api_side = get_api_side(side)
        api_symbol = get_api_symbol(symbol)

        self.logger.info(f"ÔøΩÔøΩ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é: {side} ${amount} {symbol} (x{leverage})")

        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ leverage
            try:
                self.session.set_leverage(
                    category="linear",
                    symbol=api_symbol,
                    buyLeverage=str(leverage),
                    sellLeverage=str(leverage)
                )
                self.logger.info(f"‚úÖ Leverage –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
            except Exception as leverage_error:
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É leverage - –≤—ñ–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                if "110043" in str(leverage_error):
                    self.logger.info(f"‚ÑπÔ∏è Leverage –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {leverage}x")
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ leverage: {leverage_error}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            current_price = self.get_current_price(symbol)
            if not current_price:
                return None

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
            qty = calculate_quantity(amount, current_price)

            self.logger.info(f"ÔøΩÔøΩ –°—É–º–∞: ${amount}, –¶—ñ–Ω–∞: {format_price(current_price)}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {format_quantity(qty)}")

            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            order = self.session.place_order(
                category="linear",
                symbol=api_symbol,
                side=api_side,
                orderType="Market",
                qty=str(qty),
                timeInForce="IOC"
            )

            self.logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞: {order}")
            return order

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return None

    def place_tp_orders(self, config, current_price):
        """
        –†–æ–∑–º—ñ—â–µ–Ω–Ω—è TP (Take Profit) –æ—Ä–¥–µ—Ä—ñ–≤

        –°—Ç–≤–æ—Ä—é—î —Å–µ—Ä—ñ—é limit –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
        –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª—å–æ–≤–∏—Ö —Ü—ñ–Ω.

        Args:
            config (dict): –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            current_price (float): –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –∞–∫—Ç–∏–≤—É
        """
        symbol = config['symbol']
        side = config['side']
        tp_orders = config['tp_orders']

        api_symbol = get_api_symbol(symbol)
        api_side = get_tp_side(side)

        self.logger.info(f"ÔøΩÔøΩ –†–æ–∑–º—ñ—â—É—î–º–æ {len(tp_orders)} TP –æ—Ä–¥–µ—Ä—ñ–≤...")

        for i, tp_order in enumerate(tp_orders):
            try:
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É TP
                tp_price = calculate_tp_price(current_price, tp_order['price_percent'], side)

                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                qty = calculate_quantity(
                    (tp_order['quantity_percent'] / 100) * config['market_order_amount'],
                    current_price
                )

                # –†–æ–∑–º—ñ—â—É—î–º–æ –æ—Ä–¥–µ—Ä
                order = self.session.place_order(
                    category="linear",
                    symbol=api_symbol,
                    side=api_side,
                    orderType="Limit",
                    qty=str(qty),
                    price=str(round(tp_price, 2)),
                    timeInForce="GTC"
                )

                self.logger.info(f"‚úÖ TP –æ—Ä–¥–µ—Ä {i+1}: {tp_order['price_percent']}% -> {format_price(tp_price)} ({format_quantity(qty)})")

            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ TP –æ—Ä–¥–µ—Ä–∞ {i+1}: {e}")

    def place_dca_orders(self, config, current_price):
        """
        –†–æ–∑–º—ñ—â–µ–Ω–Ω—è DCA (Dollar Cost Averaging) –æ—Ä–¥–µ—Ä—ñ–≤

        –°—Ç–≤–æ—Ä—é—î —Å–µ—Ä—ñ—é limit –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
        –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —Ü—ñ–Ω.

        Args:
            config (dict): –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
            current_price (float): –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –∞–∫—Ç–∏–≤—É
        """
        symbol = config['symbol']
        side = config['side']
        limit_orders = config['limit_orders']

        api_symbol = get_api_symbol(symbol)
        api_side = get_api_side(side)

        range_percent = limit_orders['range_percent']
        orders_count = limit_orders['orders_count']

        self.logger.info(f"ÔøΩÔøΩ –†–æ–∑–º—ñ—â—É—î–º–æ {orders_count} DCA –æ—Ä–¥–µ—Ä—ñ–≤ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {range_percent}%...")

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è DCA –æ—Ä–¥–µ—Ä—ñ–≤
        dca_prices = calculate_dca_prices(current_price, range_percent, orders_count, side)

        for i, order_price in enumerate(dca_prices):
            try:
                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                qty = calculate_quantity(
                    config['limit_orders_amount'] / orders_count,
                    order_price
                )

                # –†–æ–∑–º—ñ—â—É—î–º–æ –æ—Ä–¥–µ—Ä
                order = self.session.place_order(
                    category="linear",
                    symbol=api_symbol,
                    side=api_side,
                    orderType="Limit",
                    qty=str(qty),
                    price=str(order_price),
                    timeInForce="GTC"
                )

                self.logger.info(f"‚úÖ DCA –æ—Ä–¥–µ—Ä {i+1}: {format_price(order_price)} ({format_quantity(qty)})")

            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ DCA –æ—Ä–¥–µ—Ä–∞ {i+1}: {e}")

    def monitor_positions(self, api_symbol):
        """
        –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π

        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü—ñ–π —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤,
        –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î TP –æ—Ä–¥–µ—Ä–∏.

        Args:
            api_symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è API (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'BTCUSDT')
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            positions = self.session.get_positions(
                category="linear",
                symbol=api_symbol
            )

            if positions['retCode'] == 0:
                position_list = positions['result']['list']
                if position_list and float(position_list[0]['size']) > 0:
                    self.logger.info(f"üìä –ü–æ–∑–∏—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞: {format_quantity(float(position_list[0]['size']))}")

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
                    self.check_executed_orders(api_symbol)
                else:
                    self.logger.info("ÔøΩÔøΩ –ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            else:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {positions}")

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")

    def check_executed_orders(self, api_symbol):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤

        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏ —Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
        –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —Ç–∞ TP –æ—Ä–¥–µ—Ä–∏.

        Args:
            api_symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è API
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )

            if orders['retCode'] == 0:
                order_list = orders['result']['list']
                self.logger.info(f"üìã –ê–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤: {len(order_list)}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
                for order in order_list:
                    if order['orderStatus'] == 'Filled':
                        self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ: {order['orderId']}")

                        # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —Ç–∞ TP –æ—Ä–¥–µ—Ä–∏
                        self.recalculate_tp_orders(api_symbol)

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä–¥–µ—Ä—ñ–≤: {e}")

    def get_current_position_info(self, symbol):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é

        Args:
            symbol (str): –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–æ—ó –ø–∞—Ä–∏

        Returns:
            dict or None: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é –∞–±–æ None
        """
        try:
            api_symbol = get_api_symbol(symbol)
            positions = self.session.get_positions(
                category="linear",
                symbol=api_symbol
            )

            if positions['retCode'] == 0:
                position_list = positions['result']['list']
                if position_list and float(position_list[0]['size']) > 0:
                    return position_list[0]
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return None

    def calculate_new_avg_price(self, symbol):
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó

        Args:
            symbol (str): –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–æ—ó –ø–∞—Ä–∏

        Returns:
            float or None: –ù–æ–≤–∞ —Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∞–±–æ None
        """
        try:
            position_info = self.get_current_position_info(symbol)
            if position_info:
                avg_price = float(position_info['avgPrice'])
                self.logger.info(f"üìä –ù–æ–≤–∞ —Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {format_price(avg_price)}")
                return avg_price
            return None

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏: {e}")
            return None

    def cancel_tp_orders(self, api_symbol):
        """
        –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö TP –æ—Ä–¥–µ—Ä—ñ–≤

        Args:
            api_symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è API
        """
        try:
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )

            if orders['retCode'] == 0:
                order_list = orders['result']['list']
                for order in order_list:
                    if order['orderType'] == 'Limit':
                        self.session.cancel_order(
                            category="linear",
                            symbol=api_symbol,
                            orderId=order['orderId']
                        )
                        self.logger.info(f"‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ TP –æ—Ä–¥–µ—Ä: {order['orderId']}")

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è TP –æ—Ä–¥–µ—Ä—ñ–≤: {e}")

    def recalculate_tp_orders(self, api_symbol):
        """
        –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è TP –æ—Ä–¥–µ—Ä—ñ–≤

        –°–∫–∞—Å–æ–≤—É—î —Å—Ç–∞—Ä—ñ TP –æ—Ä–¥–µ—Ä–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ
        –æ–Ω–æ–≤–ª–µ–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó.

        Args:
            api_symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è API
        """
        try:
            # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ TP –æ—Ä–¥–µ—Ä–∏
            self.cancel_tp_orders(api_symbol)

            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É
            new_avg_price = self.calculate_new_avg_price(api_symbol.replace('USDT', '/USDT'))
            if not new_avg_price:
                return

            # –ü–µ—Ä–µ–≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ TP –æ—Ä–¥–µ—Ä–∏ –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é
            self.place_tp_orders(self.config, new_avg_price)

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É TP –æ—Ä–¥–µ—Ä—ñ–≤: {e}")

    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    def get_status(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–≤–∏–∂–∫–∞ –¥–ª—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

        Returns:
            dict: –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É
        """
        return {
            'is_running': self.is_running,
            'start_time': self.start_time,
            'config': self.config,
            'uptime': time.time() - self.start_time if self.start_time else 0
        }

    def get_positions(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        """
        if not self.config:
            return []

        api_symbol = get_api_symbol(self.config['symbol'])
        return self.get_current_position_info(self.config['symbol'])

    def get_orders(self):
        """
        –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
        """
        if not self.config:
            return []

        api_symbol = get_api_symbol(self.config['symbol'])
        try:
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )
            if orders['retCode'] == 0:
                return orders['result']['list']
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return []

    def close_all_positions(self):
        """
        –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π

        –ó–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó market –æ—Ä–¥–µ—Ä–∞–º–∏
        —Ç–∞ —Å–∫–∞—Å–æ–≤—É—î –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏.
        """
        if not self.config:
            self.logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π")
            return

        try:
            api_symbol = get_api_symbol(self.config['symbol'])
            side = self.config['side']

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            positions = self.session.get_positions(
                category="linear",
                symbol=api_symbol
            )

            if positions['retCode'] == 0:
                position_list = positions['result']['list']
                if position_list and float(position_list[0]['size']) > 0:
                    position_size = float(position_list[0]['size'])

                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
                    close_side = "Buy" if side == "short" else "Sell"

                    self.logger.info(f"üîÑ –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é: {format_quantity(position_size)}")

                    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é market –æ—Ä–¥–µ—Ä–æ–º
                    close_order = self.session.place_order(
                        category="linear",
                        symbol=api_symbol,
                        side=close_side,
                        orderType="Market",
                        qty=str(position_size),
                        timeInForce="IOC"
                    )

                    if close_order['retCode'] == 0:
                        self.logger.info("‚úÖ –ü–æ–∑–∏—Ü—ñ—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞")
                    else:
                        self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {close_order}")
                else:
                    self.logger.info("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è")

            # –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏
            self.cancel_all_orders(api_symbol)

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π: {e}")

    def cancel_all_orders(self, api_symbol):
        """
        –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤

        Args:
            api_symbol (str): –°–∏–º–≤–æ–ª –¥–ª—è API
        """
        try:
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )

            if orders['retCode'] == 0:
                order_list = orders['result']['list']
                if order_list:
                    self.logger.info(f"üîÑ –°–∫–∞—Å–æ–≤—É—î–º–æ {len(order_list)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤...")

                    for order in order_list:
                        try:
                            self.session.cancel_order(
                                category="linear",
                                symbol=api_symbol,
                                orderId=order['orderId']
                            )
                            self.logger.info(f"‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä: {order['orderId']}")
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ {order['orderId']}: {e}")
                else:
                    self.logger.info("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")
            else:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: {orders}")

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
