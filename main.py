import os
import json
import time
from dotenv import load_dotenv
from pybit.unified_trading import HTTP


class SimpleTradingEngine:
    def __init__(self):
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
        load_dotenv()

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit Demo
        self.session = HTTP(
            testnet=False,
            demo=True,
            api_key=os.getenv('BYBIT_API_KEY'),
            api_secret=os.getenv('BYBIT_API_SECRET')
        )

        print("üöÄ –¢—Ä–µ–π–¥–∏–Ω–≥–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üìä –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Bybit Demo —É—Å–ø—ñ—à–Ω–µ!")

    def load_config(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ JSON —Ñ–∞–π–ª—É"""
        try:
            with open('config.json', 'r') as f:
                config = json.load(f)
            print(f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {config['symbol']}")
            return config
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
            return None

    def get_current_price(self, symbol):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ BTC/USDT –≤ BTCUSDT –¥–ª—è API
            api_symbol = symbol.replace('/', '')
            ticker = self.session.get_tickers(category="linear", symbol=api_symbol)
            price = float(ticker['result']['list'][0]['lastPrice'])
            print(f"üìà –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {symbol}: ${price:,.2f}")
            return price
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {e}")
            return None

    def open_position(self, config):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        symbol = config['symbol']
        side = config['side']
        amount = config['market_order_amount']
        leverage = config['leverage']

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ side
        api_side = "Sell" if side == "short" else "Buy"
        api_symbol = symbol.replace('/', '')

        print(f" –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é: {side} ${amount} {symbol} (x{leverage})")

        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ leverage
            try:
                self.session.set_leverage(
                    category="linear",
                    symbol=api_symbol,
                    buyLeverage=str(leverage),
                    sellLeverage=str(leverage)
                )
                print(f"‚úÖ Leverage –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
            except Exception as leverage_error:
                # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É leverage - –≤—ñ–Ω –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                if "110043" in str(leverage_error):
                    print(f"‚ÑπÔ∏è Leverage –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {leverage}x")
                else:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ leverage: {leverage_error}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            current_price = self.get_current_price(symbol)
            if not current_price:
                return None

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
            qty = amount / current_price

            # –û–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ 3 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏ (–º—ñ–Ω—ñ–º—É–º –¥–ª—è BTCUSDT)
            qty = round(qty, 3)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            min_qty = 0.001  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è BTCUSDT
            if qty < min_qty:
                print(f"‚ö†Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å {qty} –º–µ–Ω—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó {min_qty}")
                qty = min_qty
                print(f"‚ÑπÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {qty}")

            print(f"üí∞ –°—É–º–∞: ${amount}, –¶—ñ–Ω–∞: ${current_price:,.2f}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {qty} BTC")

            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
            order = self.session.place_order(
                category="linear",
                symbol=api_symbol,
                side=api_side,
                orderType="Market",
                qty=str(qty),  # –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–∫—Ä—É–≥–ª–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                timeInForce="IOC"
            )

            print(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞: {order}")
            return order

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return None

    def place_tp_orders(self, config, avg_price):
        """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TP –æ—Ä–¥–µ—Ä—ñ–≤"""
        symbol = config['symbol']
        side = config['side']
        total_amount = config['market_order_amount']

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ side
        api_side = "Buy" if side == "short" else "Sell"
        api_symbol = symbol.replace('/', '')

        print(f"üéØ –°—Ç–∞–≤–∏–º–æ TP –æ—Ä–¥–µ—Ä–∏ –¥–ª—è {symbol}...")

        for i, tp in enumerate(config['tp_orders']):
            tp_price = avg_price * (1 + tp['price_percent'] / 100)
            tp_amount = total_amount * (tp['quantity_percent'] / 100)
            tp_qty = tp_amount / avg_price

            # –û–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ 3 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
            tp_qty = round(tp_qty, 3)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            min_qty = 0.001
            if tp_qty < min_qty:
                tp_qty = min_qty

            print(f"  TP {i + 1}: {tp['price_percent']}% = ${tp_price:,.2f} ({tp_qty} BTC)")

            try:
                self.session.place_order(
                    category="linear",
                    symbol=api_symbol,
                    side=api_side,
                    orderType="Limit",
                    qty=str(tp_qty),
                    price=str(tp_price)
                )
                print(f"  ‚úÖ TP {i + 1} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ TP {i + 1}: {e}")

    def place_dca_orders(self, config, current_price):
        """–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ DCA –æ—Ä–¥–µ—Ä—ñ–≤"""
        symbol = config['symbol']
        side = config['side']
        range_percent = config['limit_orders']['range_percent']
        orders_count = config['limit_orders']['orders_count']
        total_amount = config['limit_orders_amount']

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ side
        api_side = "Sell" if side == "short" else "Buy"
        api_symbol = symbol.replace('/', '')

        print(f" –°—Ç–∞–≤–∏–º–æ DCA –æ—Ä–¥–µ—Ä–∏ –¥–ª—è {symbol}...")
        print(f"  –î—ñ–∞–ø–∞–∑–æ–Ω: {range_percent}%, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {orders_count}, –°—É–º–∞: ${total_amount}")

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω–∏ —Ç–∞ —Å—É–º–∏
        price_step = (current_price * range_percent / 100) / orders_count
        amount_per_order = total_amount / orders_count

        for i in range(orders_count):
            if side == "short":
                dca_price = current_price + (price_step * (i + 1))
            else:
                dca_price = current_price - (price_step * (i + 1))

            dca_qty = amount_per_order / dca_price

            # –û–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ 3 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
            dca_qty = round(dca_qty, 3)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            min_qty = 0.001
            if dca_qty < min_qty:
                dca_qty = min_qty

            print(f"  DCA {i + 1}: ${dca_price:,.2f} ({dca_qty} BTC)")

            try:
                self.session.place_order(
                    category="linear",
                    symbol=api_symbol,
                    side=api_side,
                    orderType="Limit",
                    qty=str(dca_qty),
                    price=str(dca_price)
                )
                print(f"  ‚úÖ DCA {i + 1} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ DCA {i + 1}: {e}")

    def monitor_positions(self, symbol):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ DCA –ª–æ–≥—ñ–∫–æ—é"""
        try:
            api_symbol = symbol.replace('/', '')

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é
            current_position = self.get_current_position_info(symbol)

            if current_position:
                print(f"\nüìä –ü–û–ó–ò–¶–Ü–Ø: {current_position['size']} BTC")
                print(f"üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${current_position['avg_price']:,.2f}")
                print(f"üìà PnL: ${current_position['unrealised_pnl']:,.2f}")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
                executed_orders = self.check_executed_orders(symbol)

                if executed_orders:
                    print(f"üîÑ –í–∏–∫–æ–Ω–∞–Ω–æ {len(executed_orders)} –æ—Ä–¥–µ—Ä—ñ–≤")

                    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É
                    new_avg_price = self.calculate_new_avg_price(current_position, executed_orders)

                    if new_avg_price != current_position['avg_price']:
                        print(
                            f"ÔøΩÔøΩ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è: ${current_position['avg_price']:,.2f} ‚Üí ${new_avg_price:,.2f}")

                        # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ TP –æ—Ä–¥–µ—Ä–∏
                        self.recalculate_tp_orders(self.config, new_avg_price)

            return current_position

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            return None

    def check_executed_orders(self, symbol):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            api_symbol = symbol.replace('/', '')

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –æ—Ä–¥–µ—Ä–∏
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ä–¥–µ—Ä—ñ–≤
            order_history = self.session.get_order_history(
                category="linear",
                symbol=api_symbol,
                limit=50
            )

            executed_orders = []

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
            for order in order_history['result']['list']:
                if order['orderStatus'] == 'Filled':
                    executed_orders.append(order)

            return executed_orders

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return []

    def get_current_position_info(self, symbol):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é"""
        try:
            api_symbol = symbol.replace('/', '')
            positions = self.session.get_positions(category="linear", symbol=api_symbol)

            for pos in positions['result']['list']:
                if float(pos['size']) > 0:
                    return {
                        'size': float(pos['size']),
                        'avg_price': float(pos['avgPrice']),
                        'unrealised_pnl': float(pos['unrealisedPnl'])
                    }
            return None

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó: {e}")
            return None

    def calculate_new_avg_price(self, current_position, executed_orders):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏"""
        if not current_position or not executed_orders:
            return current_position['avg_price'] if current_position else 0

        total_size = current_position['size']
        total_value = current_position['size'] * current_position['avg_price']

        # –î–æ–¥–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
        for order in executed_orders:
            order_size = float(order['qty'])
            order_price = float(order['avgPrice'])

            total_size += order_size
            total_value += order_size * order_price

        if total_size > 0:
            new_avg_price = total_value / total_size
            print(f"üîÑ –ù–æ–≤–∞ —Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${new_avg_price:,.2f}")
            return new_avg_price

        return current_position['avg_price']

    def cancel_tp_orders(self, symbol):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö TP –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            api_symbol = symbol.replace('/', '')

            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –æ—Ä–¥–µ—Ä–∏
            orders = self.session.get_open_orders(
                category="linear",
                symbol=api_symbol
            )

            # –°–∫–∞—Å–æ–≤—É—î–º–æ TP –æ—Ä–¥–µ—Ä–∏ (Limit –æ—Ä–¥–µ—Ä–∏)
            for order in orders['result']['list']:
                if order['orderType'] == 'Limit':
                    self.session.cancel_order(
                        category="linear",
                        symbol=api_symbol,
                        orderId=order['orderId']
                    )
                    print(f"üóëÔ∏è –°–∫–∞—Å–æ–≤–∞–Ω–æ TP –æ—Ä–¥–µ—Ä: {order['orderId']}")

            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è TP –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return False

    def recalculate_tp_orders(self, config, new_avg_price):
        """–ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ TP –æ—Ä–¥–µ—Ä—ñ–≤ –∑ –Ω–æ–≤–æ—é —Å–µ—Ä–µ–¥–Ω—å–æ—é —Ü—ñ–Ω–æ—é"""
        symbol = config['symbol']
        side = config['side']
        total_amount = config['market_order_amount']

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ side
        api_side = "Buy" if side == "short" else "Sell"
        api_symbol = symbol.replace('/', '')

        print(f"üîÑ –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ TP –æ—Ä–¥–µ—Ä–∏ –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é: ${new_avg_price:,.2f}")

        # –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—ñ TP –æ—Ä–¥–µ—Ä–∏
        self.cancel_tp_orders(symbol)

        # –°—Ç–∞–≤–∏–º–æ –Ω–æ–≤—ñ TP –æ—Ä–¥–µ—Ä–∏
        for i, tp in enumerate(config['tp_orders']):
            tp_price = new_avg_price * (1 + tp['price_percent'] / 100)
            tp_amount = total_amount * (tp['quantity_percent'] / 100)
            tp_qty = tp_amount / new_avg_price
            tp_qty = round(tp_qty, 3)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            min_qty = 0.001
            if tp_qty < min_qty:
                tp_qty = min_qty

            print(f"  TP {i + 1}: {tp['price_percent']}% = ${tp_price:,.2f} ({tp_qty} BTC)")

            try:
                self.session.place_order(
                    category="linear",
                    symbol=api_symbol,
                    side=api_side,
                    orderType="Limit",
                    qty=str(tp_qty),
                    price=str(tp_price)
                )
                print(f"  ‚úÖ TP {i + 1} –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ TP {i + 1}: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏"""
        print("\n –ó–ê–ü–£–°–ö –¢–†–ï–ô–î–ò–ù–ì–û–í–û–ì–û –î–í–ò–ñ–ö–ê")
        print("=" * 50)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        config = self.load_config()
        if not config:
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        self.config = config

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        current_price = self.get_current_price(config['symbol'])
        if not current_price:
            return

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        order = self.open_position(config)
        if not order:
            return

        # –°—Ç–∞–≤–∏–º–æ TP –æ—Ä–¥–µ—Ä–∏
        self.place_tp_orders(config, current_price)

        # –°—Ç–∞–≤–∏–º–æ DCA –æ—Ä–¥–µ—Ä–∏
        self.place_dca_orders(config, current_price)

        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ DCA –ª–æ–≥—ñ–∫–æ—é
        print("\n –ü–æ—á–∏–Ω–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ DCA –ª–æ–≥—ñ–∫–æ—é...")
        api_symbol = config['symbol'].replace('/', '')

        while True:
            self.monitor_positions(api_symbol)
            time.sleep(10)


if __name__ == "__main__":
    engine = SimpleTradingEngine()
    engine.run()
